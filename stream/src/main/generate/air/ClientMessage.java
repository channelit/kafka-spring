/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package air;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ClientMessage extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6061018098794359058L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ClientMessage\",\"namespace\":\"air\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"unique_id\",\"type\":\"string\"},{\"name\":\"client\",\"type\":\"string\"},{\"name\":\"key\",\"type\":\"string\"},{\"name\":\"message\",\"type\":\"string\"},{\"name\":\"generated_at\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ClientMessage> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ClientMessage> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ClientMessage> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ClientMessage> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ClientMessage> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ClientMessage to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ClientMessage from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ClientMessage instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ClientMessage fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private long id;
  private java.lang.CharSequence unique_id;
  private java.lang.CharSequence client;
  private java.lang.CharSequence key;
  private java.lang.CharSequence message;
  private long generated_at;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ClientMessage() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param unique_id The new value for unique_id
   * @param client The new value for client
   * @param key The new value for key
   * @param message The new value for message
   * @param generated_at The new value for generated_at
   */
  public ClientMessage(java.lang.Long id, java.lang.CharSequence unique_id, java.lang.CharSequence client, java.lang.CharSequence key, java.lang.CharSequence message, java.lang.Long generated_at) {
    this.id = id;
    this.unique_id = unique_id;
    this.client = client;
    this.key = key;
    this.message = message;
    this.generated_at = generated_at;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return unique_id;
    case 2: return client;
    case 3: return key;
    case 4: return message;
    case 5: return generated_at;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: unique_id = (java.lang.CharSequence)value$; break;
    case 2: client = (java.lang.CharSequence)value$; break;
    case 3: key = (java.lang.CharSequence)value$; break;
    case 4: message = (java.lang.CharSequence)value$; break;
    case 5: generated_at = (java.lang.Long)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public long getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'unique_id' field.
   * @return The value of the 'unique_id' field.
   */
  public java.lang.CharSequence getUniqueId() {
    return unique_id;
  }


  /**
   * Sets the value of the 'unique_id' field.
   * @param value the value to set.
   */
  public void setUniqueId(java.lang.CharSequence value) {
    this.unique_id = value;
  }

  /**
   * Gets the value of the 'client' field.
   * @return The value of the 'client' field.
   */
  public java.lang.CharSequence getClient() {
    return client;
  }


  /**
   * Sets the value of the 'client' field.
   * @param value the value to set.
   */
  public void setClient(java.lang.CharSequence value) {
    this.client = value;
  }

  /**
   * Gets the value of the 'key' field.
   * @return The value of the 'key' field.
   */
  public java.lang.CharSequence getKey() {
    return key;
  }


  /**
   * Sets the value of the 'key' field.
   * @param value the value to set.
   */
  public void setKey(java.lang.CharSequence value) {
    this.key = value;
  }

  /**
   * Gets the value of the 'message' field.
   * @return The value of the 'message' field.
   */
  public java.lang.CharSequence getMessage() {
    return message;
  }


  /**
   * Sets the value of the 'message' field.
   * @param value the value to set.
   */
  public void setMessage(java.lang.CharSequence value) {
    this.message = value;
  }

  /**
   * Gets the value of the 'generated_at' field.
   * @return The value of the 'generated_at' field.
   */
  public long getGeneratedAt() {
    return generated_at;
  }


  /**
   * Sets the value of the 'generated_at' field.
   * @param value the value to set.
   */
  public void setGeneratedAt(long value) {
    this.generated_at = value;
  }

  /**
   * Creates a new ClientMessage RecordBuilder.
   * @return A new ClientMessage RecordBuilder
   */
  public static air.ClientMessage.Builder newBuilder() {
    return new air.ClientMessage.Builder();
  }

  /**
   * Creates a new ClientMessage RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ClientMessage RecordBuilder
   */
  public static air.ClientMessage.Builder newBuilder(air.ClientMessage.Builder other) {
    if (other == null) {
      return new air.ClientMessage.Builder();
    } else {
      return new air.ClientMessage.Builder(other);
    }
  }

  /**
   * Creates a new ClientMessage RecordBuilder by copying an existing ClientMessage instance.
   * @param other The existing instance to copy.
   * @return A new ClientMessage RecordBuilder
   */
  public static air.ClientMessage.Builder newBuilder(air.ClientMessage other) {
    if (other == null) {
      return new air.ClientMessage.Builder();
    } else {
      return new air.ClientMessage.Builder(other);
    }
  }

  /**
   * RecordBuilder for ClientMessage instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ClientMessage>
    implements org.apache.avro.data.RecordBuilder<ClientMessage> {

    private long id;
    private java.lang.CharSequence unique_id;
    private java.lang.CharSequence client;
    private java.lang.CharSequence key;
    private java.lang.CharSequence message;
    private long generated_at;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(air.ClientMessage.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.unique_id)) {
        this.unique_id = data().deepCopy(fields()[1].schema(), other.unique_id);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.client)) {
        this.client = data().deepCopy(fields()[2].schema(), other.client);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.key)) {
        this.key = data().deepCopy(fields()[3].schema(), other.key);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.message)) {
        this.message = data().deepCopy(fields()[4].schema(), other.message);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.generated_at)) {
        this.generated_at = data().deepCopy(fields()[5].schema(), other.generated_at);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing ClientMessage instance
     * @param other The existing instance to copy.
     */
    private Builder(air.ClientMessage other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.unique_id)) {
        this.unique_id = data().deepCopy(fields()[1].schema(), other.unique_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.client)) {
        this.client = data().deepCopy(fields()[2].schema(), other.client);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.key)) {
        this.key = data().deepCopy(fields()[3].schema(), other.key);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.message)) {
        this.message = data().deepCopy(fields()[4].schema(), other.message);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.generated_at)) {
        this.generated_at = data().deepCopy(fields()[5].schema(), other.generated_at);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public long getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public air.ClientMessage.Builder setId(long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public air.ClientMessage.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'unique_id' field.
      * @return The value.
      */
    public java.lang.CharSequence getUniqueId() {
      return unique_id;
    }


    /**
      * Sets the value of the 'unique_id' field.
      * @param value The value of 'unique_id'.
      * @return This builder.
      */
    public air.ClientMessage.Builder setUniqueId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.unique_id = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'unique_id' field has been set.
      * @return True if the 'unique_id' field has been set, false otherwise.
      */
    public boolean hasUniqueId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'unique_id' field.
      * @return This builder.
      */
    public air.ClientMessage.Builder clearUniqueId() {
      unique_id = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'client' field.
      * @return The value.
      */
    public java.lang.CharSequence getClient() {
      return client;
    }


    /**
      * Sets the value of the 'client' field.
      * @param value The value of 'client'.
      * @return This builder.
      */
    public air.ClientMessage.Builder setClient(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.client = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'client' field has been set.
      * @return True if the 'client' field has been set, false otherwise.
      */
    public boolean hasClient() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'client' field.
      * @return This builder.
      */
    public air.ClientMessage.Builder clearClient() {
      client = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'key' field.
      * @return The value.
      */
    public java.lang.CharSequence getKey() {
      return key;
    }


    /**
      * Sets the value of the 'key' field.
      * @param value The value of 'key'.
      * @return This builder.
      */
    public air.ClientMessage.Builder setKey(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.key = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'key' field has been set.
      * @return True if the 'key' field has been set, false otherwise.
      */
    public boolean hasKey() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'key' field.
      * @return This builder.
      */
    public air.ClientMessage.Builder clearKey() {
      key = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'message' field.
      * @return The value.
      */
    public java.lang.CharSequence getMessage() {
      return message;
    }


    /**
      * Sets the value of the 'message' field.
      * @param value The value of 'message'.
      * @return This builder.
      */
    public air.ClientMessage.Builder setMessage(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.message = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'message' field has been set.
      * @return True if the 'message' field has been set, false otherwise.
      */
    public boolean hasMessage() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'message' field.
      * @return This builder.
      */
    public air.ClientMessage.Builder clearMessage() {
      message = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'generated_at' field.
      * @return The value.
      */
    public long getGeneratedAt() {
      return generated_at;
    }


    /**
      * Sets the value of the 'generated_at' field.
      * @param value The value of 'generated_at'.
      * @return This builder.
      */
    public air.ClientMessage.Builder setGeneratedAt(long value) {
      validate(fields()[5], value);
      this.generated_at = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'generated_at' field has been set.
      * @return True if the 'generated_at' field has been set, false otherwise.
      */
    public boolean hasGeneratedAt() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'generated_at' field.
      * @return This builder.
      */
    public air.ClientMessage.Builder clearGeneratedAt() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ClientMessage build() {
      try {
        ClientMessage record = new ClientMessage();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.unique_id = fieldSetFlags()[1] ? this.unique_id : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.client = fieldSetFlags()[2] ? this.client : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.key = fieldSetFlags()[3] ? this.key : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.message = fieldSetFlags()[4] ? this.message : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.generated_at = fieldSetFlags()[5] ? this.generated_at : (java.lang.Long) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ClientMessage>
    WRITER$ = (org.apache.avro.io.DatumWriter<ClientMessage>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ClientMessage>
    READER$ = (org.apache.avro.io.DatumReader<ClientMessage>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.id);

    out.writeString(this.unique_id);

    out.writeString(this.client);

    out.writeString(this.key);

    out.writeString(this.message);

    out.writeLong(this.generated_at);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readLong();

      this.unique_id = in.readString(this.unique_id instanceof Utf8 ? (Utf8)this.unique_id : null);

      this.client = in.readString(this.client instanceof Utf8 ? (Utf8)this.client : null);

      this.key = in.readString(this.key instanceof Utf8 ? (Utf8)this.key : null);

      this.message = in.readString(this.message instanceof Utf8 ? (Utf8)this.message : null);

      this.generated_at = in.readLong();

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readLong();
          break;

        case 1:
          this.unique_id = in.readString(this.unique_id instanceof Utf8 ? (Utf8)this.unique_id : null);
          break;

        case 2:
          this.client = in.readString(this.client instanceof Utf8 ? (Utf8)this.client : null);
          break;

        case 3:
          this.key = in.readString(this.key instanceof Utf8 ? (Utf8)this.key : null);
          break;

        case 4:
          this.message = in.readString(this.message instanceof Utf8 ? (Utf8)this.message : null);
          break;

        case 5:
          this.generated_at = in.readLong();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










